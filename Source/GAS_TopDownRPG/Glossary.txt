---GLOSSARY---

Replication: The process of synchronizing game data and state across the server and clients in a multiplayer game to ensure consistency and real-time interactions.
bReplicates: A boolean property used to mark whether an Actor should replicate its state over the network. If set to true, the Actor's state is synchronized between the server and clients.

ensureMsgf: Notifies the crash reporter and outputs FormattedText to the log on the first time Expression is false

Subsystems: Modular components in Unreal Engine that handle specific game functionality or services. Subsystems provide a way to separate concerns, manage global or player-specific features, 
and maintain state across different parts of the game. Examples include Game Subsystems, Engine Subsystems, and Local Player Subsystems. Subsystems are singletons. There exists only one for the duration of the program.
Types of Subsystems:

    Game Subsystem: A subsystem that is intended to exist for the entire duration of the game. It typically handles global systems such as game state management, audio, AI, etc.

    Engine Subsystem: A subsystem that exists as part of the engine and handles engine-level systems. 
    These subsystems typically manage engine-wide functionality that may be needed across different parts of the game, such as analytics or logging systems.

    Local Player Subsystem: A subsystem that exists for each local player and is tied to the individual player’s game instance. 
    This is useful for managing player-specific systems, like input, local settings, and player preferences.

    Network Subsystem: A subsystem that exists to handle multiplayer or network-specific functionality, such as managing client-server communication or replication.
    
NetUpdateFrequency: In a multiplayer game, replicated actors (such as player characters, NPCs, or any other objects that need to be synchronized between the server and clients) 
send updates about their state (position, rotation, animation, etc.) over the network. This ensures that all players have an accurate representation of the game world.
NetUpdateFrequency controls the rate at which these updates are sent for a given actor. 
By adjusting this value, you can optimize network performance by controlling how frequently actors need to send their updates.

Replication Mode: 
Full: Use Case -> Single Player / Description -> Gameplay Effects are replicated to all clients
Mixed: Use Case -> Multiplayer, Player Controlled / Description-> Gameplay Effects are replicated to the owning client only. Gameplay Cues and Gameplay Tags are replicated to all clients.
Minimal: Use Case -> Multiplayer, AI Controlled / Description-> Gameplay Effects are NOT replicated. Gameplay Cues and Gameplay Tags are replicated to all clients.

For Mixed Replication Mode: The OwnerActor's Owner must be the Controller. For Pawns, this is set automatically in PossessedBy(). The PlayerState's Owner is automatically set to the Controller. 
Therefore, if your OwnerActor is not the PlayerState, and you used Mixed Replication Mode, you must call SetOwner() on the OwnerActor to set its owner to the Controller.

Ability Actor Info:
Main Properties of FAbilityActorInfo:
Here are the key properties that FAbilityActorInfo provides:
    AbilitySystemComponent:
        A reference to the Ability System Component (ASC) associated with the actor.
        This is where the actor’s abilities, attributes, and other GAS-related data are stored.

    AvatarActor:
        The actor that the ability is associated with (usually the player character or NPC).
        This is important because the ability may apply effects, damage, or buffs to this avatar.

    OwnerActor:
        This refers to the actor that owns the Ability System Component (often the same as the AvatarActor).
        It is the owner of the Ability System and may be different in cases where abilities are used on other actors (e.g., when one character casts a spell on another).

    AbilityTags:
        A set of tags that describe the abilities currently available or active on the actor.
        Ability tags are often used to determine the state of an ability or to check if an ability can be executed.

    AttributeSet:
        The Attribute Set associated with the actor (such as health, stamina, or mana).
        This is used to retrieve or modify the actor’s stats during gameplay.

    AbilityActorInfo Initialization:
        The FAbilityActorInfo is typically initialized when the ability is activated, usually by calling InitAbilityActorInfo() on the Ability System Component.
        This function initializes the actor info with the necessary references to the actor’s components, attributes, and other relevant data.
        
InitAbilityActorInfo can be called in PossessedBy and AcknowledgePossession if the Ability System Component is initialized in the Player Pawn itself. 
However, if the Ability System Component is not initialized in the Player Pawn, but the Player State, then InitAbilityActorInfo can be called in PossessedBy and OnRep_PlayerState in the Player Pawn.
For AI Controlled characters or NPCs, InitAbilityActorInfo can be called in BeginPlay().


Attributes:
In Gameplay Ability System (GAS), Attributes and Attribute Sets are essential components that manage and represent various character stats, such as health, mana, stamina, damage, and more. These attributes can be modified through gameplay effects and are closely tied to abilities and the overall game mechanics. Attributes have the type FGameplayAttributeData.

FGameplayAttributeData: This is a struct that holds a single value for the attribute (e.g., a float for health).
ATTRIBUTE_ACCESSORS: This is a macro that generates getter and setter functions for each attribute, making it easier to access and modify them.

Summary:
Attributes are the core stats (e.g., health, mana, stamina) that directly impact gameplay.
Attribute Set is a container for the attributes and provides functions to access and modify them.
Gameplay Abilities interact with these attributes, modifying them through Gameplay Effects.
Replication ensures that attribute values are consistent across clients in multiplayer games.


GetLifetimeReplicatedProps: The GetLifetimeReplicatedProps function allows you to declare which variables in your class should be replicated. It is typically overridden in AActor, ACharacter, or any class that is intended to be replicated in a multiplayer setting.